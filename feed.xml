<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-05-29T12:32:26+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Devlogs from a non-developer</title><subtitle>ivanol55's technical writeup blog, where a non-developer will ramble about how they fight with self-learning something outside of their professional scope and will take you along for the ride!</subtitle><author><name>Ivan Mendez</name></author><entry><title type="html">Dev Diaries - PCAPAnalyzer IV: Mistakes and manuals</title><link href="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-IV/" rel="alternate" type="text/html" title="Dev Diaries - PCAPAnalyzer IV: Mistakes and manuals" /><published>2021-05-18T10:00:00+02:00</published><updated>2021-05-18T10:00:00+02:00</updated><id>http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-IV</id><content type="html" xml:base="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-IV/">&lt;p&gt;Let’s be honest with ourselves for a moment here: when I decided that I was going to develop a tool from scratch, it was bound to have some bad choices in it. That’s how learning works, right?&lt;/p&gt;

&lt;p&gt;So, both to avoid people from making these in the future and for your amusement and entertainment, let’s speak about those mistakes I made when developing this project.&lt;/p&gt;

&lt;p&gt;The first one stemmed from a lack of experience with the tools at my disposal, in this case, specifically about the relational database mananagement system I chose to implement into our application here. If you remember our post about builduing the backend, I chose to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; as the database management program for our data storage and querying. This turned out to be my first mistake.&lt;/p&gt;

&lt;p&gt;See, in the beginning, there was a general access with &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; to all databases. Turns out, this is not a really good idea, so that needed to change for production-grade releases. This turned me to look into some IAM, or Identity and Access management, for our product. This, in turn, showed me a comparison between user management systems in different relational databases. Turns out, when compared with the rest of the options, &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; is, let’s say, &lt;em&gt;less good&lt;/em&gt;. It’s not &lt;em&gt;bad&lt;/em&gt; per se, but having seen &lt;code class=&quot;highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt;’s user, role, permission and ownership management system makes the former one look half-baked at best.&lt;/p&gt;

&lt;p&gt;So, it came time to port the entire ecosystem to &lt;code class=&quot;highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt;. This got me mixed results. On the frontend side, it was mostly simple in the &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; side, even though I needed to make some slight modifications, mostly for time calculation. On the backend side, however, it was a mixed bag. Choosing the new &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt; driver for database management system interaction was dead simple: the tried and true standard is just using &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; and running with it, since it implements all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; database interaction standards as the specification requires, so it’s better standardized.&lt;/p&gt;

&lt;p&gt;But in contrast, I found the problems when I tried to insert data into the database. It was kind of simple in the local server capture, since it was a &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY FROM&lt;/code&gt; command that grabs a &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; file that is read into the database. But then I discovered a problem: &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY FROM&lt;/code&gt; is a SQL command that reads server files. But it wasn’t reading CSV files from agents. After a couple of hours of scratching my head, I noticed the problem: It was looking for &lt;em&gt;local folders&lt;/em&gt; that didn’t exist in the server. Because agents are &lt;em&gt;remote&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That said, &lt;code class=&quot;highlighter-rouge&quot;&gt;psycopg2&lt;/code&gt; has its grounds covered for you in this, thanks to being a more standard and complete database driver than the &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; counterparts. You can just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy_expert()&lt;/code&gt; function and use a &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY FROM STDIN&lt;/code&gt; query, that will just read the function parameter with the entire file. Presto, it works. It just inserts a really long string over the network. (bonus points since &lt;code class=&quot;highlighter-rouge&quot;&gt;postgreSQL&lt;/code&gt; has ssl-enabled connections by default!)&lt;/p&gt;

&lt;p&gt;Good, now all of our system is running against &lt;code class=&quot;highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt;! Everyone can come in and check!&lt;/p&gt;

&lt;p&gt;Which brings us to our second problem on the line. &lt;em&gt;everyone&lt;/em&gt; can come in and check. There’s no access control system. The frontend and API are a wild west free-for-all. That needs to change.&lt;/p&gt;

&lt;p&gt;Here I chose to learn something new to implement here. I’ve never done user storage and retrieval, and I wanted some testing done. So I investigated a bit. Seemed like I needed two things: API access control, and user login control. The API control was easy: just generate 32 character alphanumeric strings, and check that the strings exist in the newly created credentials database for every API request. Then, the user and password management system.&lt;/p&gt;

&lt;p&gt;This, as it turns out, was easier than I expected it to be. Inserting the user is just as easy as transforming the provided password into a &lt;code class=&quot;highlighter-rouge&quot;&gt;bcrypt blowfish&lt;/code&gt; hash and inserting it into the database, then using another function built ito php to check if it is correct. No need for my own salting or anything. Then it was just a matter of checking if the user was logged in on every page, and done, the system now has Identity and Access Management. Just a page to create users, and some code to check the login status.&lt;/p&gt;

&lt;p&gt;Now, that last bit brings us to our next problem. I was just pasting the code into the &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; file headers, and remembered a line in the &lt;code class=&quot;highlighter-rouge&quot;&gt;to-do.txt&lt;/code&gt; on my Documents folder&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Refactor PCAPAnalyzer into using functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeah, I was just running &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; scripts when coming into a folder. Not a single function on sight. Wanna change something in the menu? change it on the 9-12 files where it’s stored. This is something that needed a substantial logic rewrite. Thankfully all my code was mostly the same in every page check, so after a bit of investigation into how &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;s worked in &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; and some variable passing logic, the app was complete. One change in the function, and the menu was different in every single page. One line of security login checking, and the entire function check took care of the needed session checks. Structure!&lt;/p&gt;

&lt;p&gt;Now, writing this I noticed a problem. I had kind of forgotten how my old code worked. Well, okay, some parts I didn’t remember &lt;em&gt;at all&lt;/em&gt;. Past Ivan decided that a couple thousand lines of code didn’t really need code comments or documentation, since I remembered it then, didn’t I?&lt;/p&gt;

&lt;p&gt;Well, since this was going to be a public project, I needed some actual documentation, both for code cleanup and clarity, and for usage documentation and feature discoverability. The first one was simple once I discovered how my old code actually worked, just write out the logic of the functions and HTML generation, and it was a much easier to understand project for anyone that came in without knowing the project.&lt;/p&gt;

&lt;p&gt;On the other hand, user/administration documentation was a different beast altogether. This is something that I had never done before, so it was a chance to get to know a new tool. I asked around for recommendations, and I got one that I liked a lot: on the &lt;a href=&quot;https://selfhosted.show/&quot;&gt;SelfHosted podcast&lt;/a&gt; Discord server, &lt;a href=&quot;https://github.com/realorangeone&quot;&gt;RealOrangeOne&lt;/a&gt; pointed me towards &lt;code class=&quot;highlighter-rouge&quot;&gt;MKDocs&lt;/code&gt;. Turns out, I had seen &lt;code class=&quot;highlighter-rouge&quot;&gt;MKDocs&lt;/code&gt; hundreds of times before, I just never knew. Everyone seems to be building their user docs on it, so it’s an active project that, upon inspection, basically told me “Jekyll for documentation”, so I was sold. Downloaded the packages into my machine, wrote the documentation structure, pushed into github, ran &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs gh-deploy&lt;/code&gt;, boom, &lt;a href=&quot;https://ivanol55.github.io/pcapanalyzer-docs/&quot;&gt;the docs were up&lt;/a&gt;. No wonder this is the standard out there.&lt;/p&gt;

&lt;p&gt;The project worked. It was fully documented. It was usable by other people. We were ready for lauch, except for one last detail&lt;/p&gt;

&lt;p&gt;I don’t trust my code security. I haven’t ever done security-oriented programming, and I would be far more comfortable with the project with some pentesting done to it. So, thanks to this being a class project, I enlisted the help of &lt;a href=&quot;https://github.com/hondas04&quot;&gt;Sergi&lt;/a&gt;. Sergi is a systems administrator and classmate of mine focusing in cybersecurity and penetration testing, so we decided that part of the project would be to pentest the program.&lt;/p&gt;

&lt;p&gt;Long story short is we did end up discovering a couple high-priority CVE’s on the program, basically some stored cross-site scripting and session stealing, which enabled an attacker to access the application. These vulnerabilities have since been fixed on the application thanks to the HTTPOnly flags set on a the &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;As always, let’s recap what we ended up changing and fixing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rewrote the interaction with the database management system from &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;Changed the frontend to postgresql queries and php variables&lt;/li&gt;
      &lt;li&gt;Changed the backend to interact using the &lt;code class=&quot;highlighter-rouge&quot;&gt;psycopg2&lt;/code&gt; interaction library&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Implemented identity and access management for the web frontend of the ecosystem&lt;/li&gt;
  &lt;li&gt;Implemented authentication for our API endpoint requests&lt;/li&gt;
  &lt;li&gt;Rewrote the frontend implementation to work using functions&lt;/li&gt;
  &lt;li&gt;Documented our newly refactored code&lt;/li&gt;
  &lt;li&gt;Documented the usage and management of our application ecosystem with MKDocs&lt;/li&gt;
  &lt;li&gt;Ran a penetration testing session with some friendly help&lt;/li&gt;
  &lt;li&gt;Fixed the vulnerabilities we found on the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, with that, the project was finally complete! So this two and a half year development journey is complete, and you can now check out the &lt;a href=&quot;https://ivanol55.github.io/pcapanalyzer/&quot;&gt;PCAPAnalyzer project&lt;/a&gt; and the accompanying &lt;a href=&quot;https://ivanol55.github.io/pcapanalyzer-docs/&quot;&gt;Project documentation&lt;/a&gt;! Now I just need to figure out what our next project is gonna be…&lt;/p&gt;

&lt;p&gt;We’ll see!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="dev diaries" /><summary type="html">Let’s be honest with ourselves for a moment here: when I decided that I was going to develop a tool from scratch, it was bound to have some bad choices in it. That’s how learning works, right?</summary></entry><entry><title type="html">Dev Diaries - PCAPAnalyzer III: What do you mean CSS is turing-complete?</title><link href="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-III/" rel="alternate" type="text/html" title="Dev Diaries - PCAPAnalyzer III: What do you mean CSS is turing-complete?" /><published>2021-04-03T10:00:00+02:00</published><updated>2021-04-03T10:00:00+02:00</updated><id>http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-III</id><content type="html" xml:base="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-III/">&lt;p&gt;I think that, if you take a look around this site, even though it’s built upon a Jekyll theme, you will notice a fact that is impossible to deny: apart from not being a programmer, I am &lt;em&gt;also&lt;/em&gt; very much not a designer.&lt;/p&gt;

&lt;p&gt;I have had HTML (and some CSS) experiences in class. Granted, it was stay at home classes because there was a &lt;em&gt;pandemic&lt;/em&gt; happening, so I didn’t get a lot of explaining done to me at the time. Then, to make it not boring, I had some self-taught PHP under my now less-fitting belt (again, pandemic. Did we all bake our own bread at the time?) and some PHP classes on an actual school this time, because the curve was flattened. Kinda.&lt;/p&gt;

&lt;p&gt;So what I learnt about all of the earlier steps of this process in terms of good practice in software development, and in general, is to plan before I do. So I decided I needed to plan the feature scheme for the frontend first, then implement it bit by bit later. It’s very much a lot easier to build something that is clearly outlined, that to jump in and just start writing PHP without proper forethought!&lt;/p&gt;

&lt;p&gt;So, I gave it a lot of thought, built it, and did it wrong. Learning!&lt;/p&gt;

&lt;p&gt;Let’s go through what my planning scheme was. So, first, let’s talk about the landing page. We enter the URL and we should land on a page that should act like a &lt;em&gt;dashboard&lt;/em&gt; of sorts. I like what &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; does, just simple numbers at a quick look, so I kind of mimicked that. I display, on a table, every database accessible and show the total number of stored packets, the data sources it has, the total number of external IPs, MAC addresses count, the multicast packets, and how many protocols were found on the capture. Just quick numbers in case something looks abnormal.&lt;/p&gt;

&lt;p&gt;Then we get to probably the hardest part of the project to engineer: packetStream. packetStream is what this project initially was thought for. Here, we display every single packet that has gone through the capture interface. Any data you captured, a query away. Now, because this is a lot of data, it is imperative that I built in a filtering system in place, which lets you filter by any combination of columns in the system, like finding all of the packets that are SSH auth attempts from a certain IP. Or finding everything a certain machine has done (with their MAC address). All behind a pretty interface, in 50-packet lists.&lt;/p&gt;

&lt;p&gt;Is this an overwhelming amount of data? It probably is. Going packet by packet is not efficient when searching for intrusion attempts in a large-scale network. That’s why I came up with dataGlance. dataGlance, as its name explains, is &lt;em&gt;data&lt;/em&gt; at a &lt;em&gt;glance&lt;/em&gt;. Yeah, don’t call me to name Amazon Web Services products, I’m incapable of coming up with something convoluted like &lt;em&gt;lightsail&lt;/em&gt; or &lt;em&gt;kinesis&lt;/em&gt;. Names are supposed to be helpful ever before they accomplish a PR task.&lt;/p&gt;

&lt;p&gt;So, here in this tab we get useful information that we may be interested on, pre-calculated for us. All of the found private and public IP addresses. Is there a DHCP lease that is not accounted for? Is someone connecting to somewhere in an IP block ythey shouldn’t be? It’s here. Any MAC address that is not from a known machine is running around? here’s a full list of the seen ones for you to cross-reference. What protocols have gone through a capture point? what ports are being used? All that info is here. just a click away for you to account for and investigate.&lt;/p&gt;

&lt;p&gt;Now it feels like this might need more. Yes, a quick glance at data has shown you some potential need for investigation, But then, simple filtering through dataGlance is not cutting it anymore. You need absolute control. That’s where queryRunner comes in.&lt;/p&gt;

&lt;p&gt;Again, the feature is named in the anti-Amazon Web Services naming scheme: it does exactly what it is named like. You write a SQL query on the text box, it runs against the database, and you get your data. In this case, you get your data as a CSV text file, because as we established in an earlier blog post, yay for standard formats, and you do whatever you want with it from then on, locally.&lt;/p&gt;

&lt;p&gt;All of these seem like good features to have on a piece of forensics networking software, but having it only capture traffic from some source is not that interesting for a lot of use cases. Maybe the big incident already happened and you need to run an analysis on already captured data?&lt;/p&gt;

&lt;p&gt;This is where dbCreator and databasePicker join the game.&lt;/p&gt;

&lt;p&gt;The first one is a simple form: you provide a name, you provide some &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; files, click on the button, wait a bit and boom, you have a database to work as, like you did in your network capture environment, with almost the same features as we did for the packetStream backend. (dataSources aren’t identifiable from pcap files, at least as I understand it now, unfortunately).&lt;/p&gt;

&lt;p&gt;Then, changing to your new database is dead simple. Just click the menu button displaying your current database and you will be taken to databaseChanger, which lets you choose your newly created database and set it as active. From then on until your session ends or you switch it again, you’ll run all your data queries and page browsing checks against the database you selected. Then, when you’re done with it, you can just drop the database if you want to save space on your server.&lt;/p&gt;

&lt;p&gt;Then on the About page you manage access to the program. You can both create ysers in the user management console to access the web frontend, and you can create API keys for the API query system.&lt;/p&gt;

&lt;p&gt;Which takes me to the fact that there is an API query system! You have the option to retrieve data, like all of the available databases, the data from the frontpage, or the data from dataGlance, so you can integrate it in a custom client, like perhaps a desktop app or an external monitoring tool?&lt;/p&gt;

&lt;p&gt;Now you many notice that this was all too simple. Too few mistakes along the way, too few rewriting decisions in our process. And I thought so too. And then, the two afterthoughts came upon me, one from getting to know a new tool and one from procastination. The first one happened when I discovered that PostgreSQL existed thanks to my classes, and how the user control system was &lt;em&gt;way&lt;/em&gt; nicer for my plans (and also, less related to Oracle), best defined python connector drivers for the backend… It was worth a move!&lt;/p&gt;

&lt;p&gt;Unfortunately, this automatically revealed to me that I had a roadblock based on procastination: my php code had exactly zero (0) functions in it. It was just a pack of scripts running some queries, because I did very much not expect the project to get this large.&lt;/p&gt;

&lt;p&gt;Let’s recap what we have gotten to do so far:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a front page that shows us numeric data for each of our databases&lt;/li&gt;
  &lt;li&gt;packetStream, a multi-source table system with filtering options for finding some specific types of communication on the logs&lt;/li&gt;
  &lt;li&gt;dataGlance, a page that shows you important info on simple tables, visible on just a fast look for sususpicious data&lt;/li&gt;
  &lt;li&gt;queryRunner, just run any SQL query you want against your database and get a handy &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; file to put into any other system that will swallow it&lt;/li&gt;
  &lt;li&gt;dbCreator and databaseChanger, for after-the-fact large scale analysis tasks for any &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; files that you may want to upload into the system and get the frontend treatment for their data&lt;/li&gt;
  &lt;li&gt;Identity and Access Management for the frontend system with user management and API key creation and dropping&lt;/li&gt;
  &lt;li&gt;An API system where you can query the available database list, and any dataGlance and frontpage data entries in handy universal &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the frontend worked! For like, a week. Then it was time to move to &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql&lt;/code&gt;, and the entire project was halted because backend compatibility connectors were mad that that the &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; connector was not pointing to a &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; relational database management system anymore. So, in the next post, my naïve and dumb decisions mean I get to learn code refactoring &lt;em&gt;the hard way&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;See you then!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="dev diaries" /><summary type="html">I think that, if you take a look around this site, even though it’s built upon a Jekyll theme, you will notice a fact that is impossible to deny: apart from not being a programmer, I am also very much not a designer.</summary></entry><entry><title type="html">Dev Diaries - PCAPAnalyzer II: uncharted territory!</title><link href="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-II/" rel="alternate" type="text/html" title="Dev Diaries - PCAPAnalyzer II: uncharted territory!" /><published>2021-03-11T10:00:00+01:00</published><updated>2021-03-11T10:00:00+01:00</updated><id>http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-II</id><content type="html" xml:base="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-II/">&lt;p&gt;The whole concept of asynchronous programming or service development is something I never got to learn on my classes. I did try self-learning, but this really felt like I’d need a tutor. To my surprise, this backend thing ended up working out!&lt;/p&gt;

&lt;p&gt;The word “backend” to me speaks like I am out here building an actual tool. One of those concepts you hear in actual open source projects that we all use literally every day. “frontend”, “backend”, “stack”… stuff apparently you should have for “scalability” or something. And thanks to this project, I got to learn how important, and how complicated, a good backend architecture is about. If you build it &lt;em&gt;well&lt;/em&gt;, but you build it &lt;em&gt;once&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My happy self, Unbenownkst of the actual difficulty of these tasks, did not follow neither of those words while wholeheartedly believing I was building good architecture. But I would find out about this much, much later, so we’ll address that in a future post detailing just how much I learnt while rewriting my own bad code.&lt;/p&gt;

&lt;p&gt;So, let’s remember what we dedided we needed for this application backend.&lt;/p&gt;

&lt;p&gt;We wanted to capture interface communication data on a machine with industry standard tooling. This task was accomplished with &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, the incredibly versatile command line interface for &lt;code class=&quot;highlighter-rouge&quot;&gt;wireshark&lt;/code&gt;, the absolute standard for network data analysis. There were other considerations, like &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;, but I’ve always seen that one as a “quick and dirty” tool for a basic live monitoring job, no analysis. Both of them use the &lt;code class=&quot;highlighter-rouge&quot;&gt;libpcap&lt;/code&gt; standard library under the hood anyways, so it’s up to interface usage.&lt;/p&gt;

&lt;p&gt;Next, we need to store that big amount of data in one single place, and we need to retrieve it fast. Here enters &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;, the biggest relational database management system out there by far. Or, at least, its open source counterpart &lt;code class=&quot;highlighter-rouge&quot;&gt;mariadb&lt;/code&gt; because there will be no Oracle licensing in this house. Not on my watch, at the very least. Well, I do use VirtualBox, but that kinda doesn’t count, because that’s not production-designed software. I mean, it’s &lt;em&gt;VirtualBox&lt;/em&gt;. It’s the toy equivalent of virtualization software. But, I’m losing track, moving on.&lt;/p&gt;

&lt;p&gt;Unfortunately, both of these use their own binary file writing standards, incompatible with each other, because sometimes you decide to prioritize internal reading optimization at the cost of application interoperability, but this is not for us. So, we need &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;’s. We generate these &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;’s with the programming language I am the most comfortable with using thanks to my classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;. Human-readable, me-writable!&lt;/p&gt;

&lt;p&gt;Okay, so, tools chosen, next it’s infrastructure time. First, the easy part: copying (and slightly modifying) a &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; command for continuous &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; generation on a folder. That one was easy. Then, move the completed ones to a new directory with some &lt;code class=&quot;highlighter-rouge&quot;&gt;bash script&lt;/code&gt; dark magic. Slightly less easy, but &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; and StackOveflow were the usual lifesavers, so it got to a working state soon enough. script it in python with some help of importing the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; library for command execution and filesystem management, and the first part was set!&lt;/p&gt;

&lt;p&gt;Second step: convert these &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; files into a universally readable &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; file. After some DuckDuckGo-ing I got &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt; to read these files into rows of text separated by commas, each one being one packet from the system. Then I noticed that this was gonna be a bit harder, because this wasn’t enough of a challenge and it was getting boring, right? Well, apparently, someone over at the god forsaken lands of Wireshark development space decided that who needs ISO compliant date formats? What for? not like interoperability is important, right? especially who would need well formatted &lt;em&gt;dates&lt;/em&gt;, eh?&lt;/p&gt;

&lt;p&gt;Well, thankfully, someone on that team has earned their angel wings by force of feature implementation with something called &lt;code class=&quot;highlighter-rouge&quot;&gt;epoch time&lt;/code&gt;, a format that counts the seconds that have passed since January 1st, 1970 (does this date ring a bell? I’m sure you’ve seen it when some time error happens), universally used as standard time on UTC, so we’ll use that and be off the races. One epoch to datetime conversion and some string joining on the script, and we write it off to our next step!&lt;/p&gt;

&lt;p&gt;Step three was kind of weird. See, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; is an Oracle product. So the one to one compatibility needs are transported to &lt;code class=&quot;highlighter-rouge&quot;&gt;mariadb&lt;/code&gt;. This means we have a really good database connection driver written for &lt;em&gt;java&lt;/em&gt;. I am not using java. After some investigation I quickly found out that on our case, library choice is a bit more of a mess. There’s &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql.connector&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQLdb&lt;/code&gt;… everyone claims to be the standard and better than everyone else. &lt;a href=&quot;https://xkcd.com/927/&quot;&gt;Relevant xkcd&lt;/a&gt;. But anyways, I ended up with &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQLdb&lt;/code&gt; just to choose one of the competent ones, and get doing. It was simple enough to read a file for lines, and run an &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; query for every entry into the database.&lt;/p&gt;

&lt;p&gt;Yes, I know. We’ll talk about that on the mistakes post. Good thing I had a database class teacher near me!&lt;/p&gt;

&lt;p&gt;now, at this point, I could run through the entire process to make it work, fixing rough edges here ad there. But it was &lt;em&gt;me&lt;/em&gt; running the scripts on the system. That doesn’t sound very backend service-y, does it? So, it was time for the newest kid in my town: process management. This is something that, to me, as a last year vocational studies systems administration student, sounded &lt;em&gt;spooky&lt;/em&gt;. Fortunatrly, it ended up being way easier than I expected it to be! I just imported the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; library, tried simply running the scripts as subprocesses of this &lt;code class=&quot;highlighter-rouge&quot;&gt;start.py&lt;/code&gt; script, and after some playing around with relative paths (the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; library does some weird things to relative paths depending on where you run it) and it was working!&lt;/p&gt;

&lt;p&gt;Next was to control it from the system, because I can’t go around putting “just kill &lt;code class=&quot;highlighter-rouge&quot;&gt;start.py&lt;/code&gt;” on the documentation. I had never written a custom service file. Hell, I had to google where they were stored! but again, GNU/Linux is amazing like that, so with some documentation and some observing the already made &lt;code class=&quot;highlighter-rouge&quot;&gt;.service&lt;/code&gt; files, the thing was just working. Intuitive and human-readable as anything I’ve ever used. As much fun as I like to poke at &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt;, I don’t think I can use anything but service files anymore.&lt;/p&gt;

&lt;p&gt;So, apparently, this was done! a bit more tweaking in script sleeping times on the main script launcher, and a lot more tweaking to maken actually valid &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; for edge cases that creeped up on me, and the backend was fully operative and chugging along! Job well done! (writer’s note: I did not know about the fact that I had enough material for a mistakes blogpost back at that time. I was young, happy and naïve.)&lt;/p&gt;

&lt;p&gt;So I had a backend! it fully worked, and I could &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; away all my network packets away however big the thing was, filer with anything I wanted… Wireshark (mostly) meets SQL!&lt;/p&gt;

&lt;p&gt;As a usual habit, let’s list what we ended up with in a bullet point list for summarizing my text blocks&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We start capturing data with an unending &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt; task, from a &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; library&lt;/li&gt;
  &lt;li&gt;When the files are done being written to, we move them with a bash incantation I cannot fully decipher&lt;/li&gt;
  &lt;li&gt;When files are moved to the new location, we run them through a python script that
    &lt;ol&gt;
      &lt;li&gt;Reads the &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; file into standard input&lt;/li&gt;
      &lt;li&gt;we modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;epoch time&lt;/code&gt; entries into UTC time&lt;/li&gt;
      &lt;li&gt;we join empty fields into consistent entries that &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt; separates by default&lt;/li&gt;
      &lt;li&gt;We write it all into a new processed &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; in a standard usable format for our database scheme&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The new CSV is fed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; library called &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQLdb&lt;/code&gt; that connects to our &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; instance and runs an &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; query for each row on the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Working infrastructure!&lt;/p&gt;

&lt;p&gt;But a backend is that. &lt;em&gt;back&lt;/em&gt;. Like the back of a refrigerator, it’s pretty damn ugly to look at if you don’t know what you’re working on. So, on the next blogpost: frontend! we get to see why I am even less of a designer than I am a developer! responsive can’t be that hard of a task, can it?&lt;/p&gt;

&lt;p&gt;We’ll see how that train of thought ended as the inevitable full scale railway accident it was meant to be since the moment I said “responsive design”.&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="dev diaries" /><summary type="html">The whole concept of asynchronous programming or service development is something I never got to learn on my classes. I did try self-learning, but this really felt like I’d need a tutor. To my surprise, this backend thing ended up working out!</summary></entry><entry><title type="html">Dev Diaries - PCAPAnalyzer I: File rotation is kind of ugly</title><link href="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I/" rel="alternate" type="text/html" title="Dev Diaries - PCAPAnalyzer I: File rotation is kind of ugly" /><published>2021-02-28T10:00:00+01:00</published><updated>2021-02-28T10:00:00+01:00</updated><id>http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I</id><content type="html" xml:base="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I/">&lt;p&gt;Have you ever used Wireshark?&lt;/p&gt;

&lt;p&gt;It’s an &lt;em&gt;amazing&lt;/em&gt; network debugging and investigation tool. Anyone remotely related to connected comùters will regularly use it. Networking, security analysts, network application development, penetration testing… either directly by just using the graphical software, the CLI tool &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, or a variation of that for a quick lightweight debugging, like &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;. It will start sniffing in whatever network interface you tell the program to listen on, and log every single packet it sees into a file for storage, or even into standard input for you to just see in a quick check, for example to see if one of your programs is actually sending keepalive connections.&lt;/p&gt;

&lt;p&gt;But that’s where the problems start popping up on the “let’s store everything in one file” solution: scalability basically disappears from your scope, for concurrency and management issues we’ll get into later.&lt;/p&gt;

&lt;p&gt;Have you ever tried to open up wireshark in a windows machine? They have a &lt;em&gt;lot&lt;/em&gt; of background traffic. Like, &lt;strong&gt;&lt;em&gt;a lot&lt;/em&gt;&lt;/strong&gt;. Phoning home for update checks, antivirus definition changes, hell, even the windows calculator needs to phone home for currency conversion capabilities. The future is now, and it’s connected. Just network noise galore.&lt;/p&gt;

&lt;p&gt;Although the truth is you don’t even need Windows for that to be a problem to be a thing. Linux doesn’t have that noise problem, but if you have a lot of linux boxes, the problem pops up again. So, when you’re on the security field, like SOC analysis, you get quite a big amount of traffic to process. Thing is, then you imagine what most offices are, which is bbasically a big bunch of &lt;em&gt;windows&lt;/em&gt; machines, and you quickly notice you’re gonna run into some big data-related problems.&lt;/p&gt;

&lt;p&gt;Now, there’s a problem with file storage even when you’re only handling a single data node, and it’s that the format can be inefficient. It’s convenient, but you can’t do a lot with it before you get out of control. Try to open a 1 Gigabyte &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; file and see what it takes to open it and filter content. That’s a gigabyte. A twenty minute 1080p youtube video is a gigabyte of traffic. This can be generated by one client, in twenty minutes, without them doing anything else, which is unlikely. Email sending, open browser tabs with open connections, background programs polling for updates… multitasking in computers, and multitasking in your coworkers! concurrency for the concurrency gods!&lt;/p&gt;

&lt;p&gt;So we have a size problem. How was this solved originally? with a little something called &lt;em&gt;file rotation&lt;/em&gt;. This is a program implementation that allows programs to, once the files reach a certain size, consider it finished and rotate into a new one, like moving from &lt;code class=&quot;highlighter-rouge&quot;&gt;netlog.pcap.000001&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;log.pcap.000002&lt;/code&gt;. Even then, if it’s a constant system, you can circle back and overwrite the first one. So this would never run you out of space! Cool solution! problem solved, right?&lt;/p&gt;

&lt;p&gt;Well, if this was a done and solved problem for my use case, I would not be here writing a blog post series about it, wouln’t I?&lt;/p&gt;

&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; solved in terms of enterprise tool availability for production usage, but there’s no fun on just installing an already readily available tool for this that handles it, learning happens when you break and fix stuff! and what better to fix roadblocks on, that your own new from-scratch tool?&lt;/p&gt;

&lt;p&gt;My problem here is that I like centralization of content. So I don’t like having many files around and worrying that they will one day be overwritten. But even for non-lazy people, this creates a data concurrency problem, since only one person could write a file at once, and that means you could only have one client at a time. Pretty useless data aggregation system, if you ask me.&lt;/p&gt;

&lt;p&gt;I obviously decided to overengineer an open source-licensed solution that only I would use, that is also probably worse than the actual solutions out there. Because if you know this blog, you know I’m about security and IT design, not application development. That said, I still like to learn new stuff and challenging myself, so project PCAPAnalyzer was born.&lt;/p&gt;

&lt;p&gt;Now, this happened around two and a half years ago now, and has been in development intermittently since, because self-learning roadblocks. I hadn’t gotten into desktop app development then and I haven’t yet (that may be a future series? stay tuned!) so I turned into the next best thing I knew: Web Applications. I knew HTML, I had heard about PHP, that’s how those work, right? Open up a browser, click the link bookmark and the entire tool is at your disposal! No dependency hell, no distributed app update management for potentially hundreds of machines, no client drift from a valid config… beautiful words for a mantainer that is really not a mantainer!&lt;/p&gt;

&lt;p&gt;First thing I needed was to set app requirements and priorities. You can’t build something if you don’t know &lt;em&gt;what&lt;/em&gt; you want and need to build. I got to thinking about the frontend first. Now, I’m a simple man. I see a standard, I use a standard. Django? That looks like too much abstraction, and I already know some pyhthon3, so I want something tried and tested, and also new to me.&lt;/p&gt;

&lt;p&gt;On web, PHP seems to be my best bet, since it’s also a useful skill to pick up. No laravel or anything, I don’t want &lt;em&gt;any&lt;/em&gt; unnecesary abstraction layers. You learn the basics first, then build up with simplifying tools. The rest was the standard: HTML, CSS3 (I &lt;em&gt;could&lt;/em&gt; use Bootstrap, but I think I’m gonna leave learning responsive design for another time), apache2 webserver.&lt;/p&gt;

&lt;p&gt;Next comes the backend. This was, at the time, completely new territory to me, so I did some searching in good ol’ DuckDuckGo and looked at what could best suit my needs. I wanted to aggregate everything I gathered into one place and make it really fast in terms of data search at scale (I was going to quickly add up a &lt;em&gt;lot&lt;/em&gt; of data, remember the youtube video example?), so that screamed Database to me.&lt;/p&gt;

&lt;p&gt;I had also done a bit of learning on class about the LAMP stack, so I was familiar with MySQL. Free, Open Source, enterprise-ready scalable software, there for me to use, it was the perfect match. Data capture source was wireshark on the terminal, that one’s easy! unfortunately, wireshark does not have a “put into database” terminal option, neither does MySQL have a “wireshark capture” data source. So I needed some data processing.&lt;/p&gt;

&lt;p&gt;This is the part of the backend that was going to be the most engaging: something I build basically &lt;em&gt;from scratch&lt;/em&gt;. In class we processed data with python scripts, and it seemed very extensible and easy to implement. So I chose python as a tool for data processing and transformation, which then would go into a database. Processing strings and inserting into a database.&lt;/p&gt;

&lt;p&gt;Let’s list our finaly decided application requirements and the choices to actually meet them&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;frontend
    &lt;ol&gt;
      &lt;li&gt;We want this tool to be available inside of a website, solved with &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; for delivery because it’s the gold standard&lt;/li&gt;
      &lt;li&gt;The site should be dynamic and it needs to be capable of database management around our &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; backend, solved using &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Make it pretty: &lt;code class=&quot;highlighter-rouge&quot;&gt;css3&lt;/code&gt; is tried and tested for something! the web standard is very much a good tool for us&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;backend
    &lt;ol&gt;
      &lt;li&gt;Network interface(s) data capture with Wireshark, more precisely its terminal counterpart &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, because, no-gui Debian server!&lt;/li&gt;
      &lt;li&gt;Store the data consistently for fast retrieval: &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; has been getting more efficient for the last twenty five years, good amount of work there&lt;/li&gt;
      &lt;li&gt;Data treatment: There’s a lot of binary formats around that are not compatible with each other. That’s why we created &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;, the age of interoperability. Let’s create some of those with &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had seen all this on separate class assignments, so it was a good cross-understanding test! project PCAPAnalyzer was feasible and it was just about time for some invesigation and building! an &lt;em&gt;actual&lt;/em&gt; product on the horizon!&lt;/p&gt;

&lt;p&gt;But that’s a story for the next dev diary, where we’ll start giving an eye into how much I underestimanted the complexity of data processing as a non-developer. See you then!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="dev diaries" /><summary type="html">Have you ever used Wireshark?</summary></entry><entry><title type="html">Headbang development I: What’s this Jekyll thing?</title><link href="http://localhost:4000/blog/headbang%20development/headbang-development-I/" rel="alternate" type="text/html" title="Headbang development I: What’s this Jekyll thing?" /><published>2021-02-14T10:00:00+01:00</published><updated>2021-02-14T10:00:00+01:00</updated><id>http://localhost:4000/blog/headbang%20development/headbang-development-I</id><content type="html" xml:base="http://localhost:4000/blog/headbang%20development/headbang-development-I/">&lt;p&gt;Blogging is a good way to practice your technical writing soft-skills. You get to learn the really important ability of writing understandable content for a broad audiences, with the perk of building up portfolio. Win-win, right? well, that is, if you can find a topic. Development diaries? client work stories? software reviews? Choice paralysis is a thing, and picking a consistent theme and structure is complicated.&lt;/p&gt;

&lt;p&gt;Then I started to build this blog while I thought about dev diaries in a completely new platform to me, and suddenly saw my first post series in front of me, in the form of cryptic error codes and stacked browser tabs: self-learning stories.&lt;/p&gt;

&lt;p&gt;Self-learning sounds fun at first when you look at it. That’s something that recruiters like, right? independence, knowing how to set yourself up in new environments without much one-on-one help, something-something pull your own bootstraps. It &lt;em&gt;is&lt;/em&gt; a really useful skill to pick up, especially as a junior, but it can sometimes be an… interesting process.&lt;/p&gt;

&lt;p&gt;I like to compare this way of learning to &lt;a href=&quot;https://www.answerinprogress.com/&quot;&gt;Answer in Progress&lt;/a&gt;’s way of investigating a topic: search what you want to do on Google (Bonus points for using DuckDuckGo) and see where the algorithm takes you. Documentation, courses, “getting started” tutorials, github repos… I usually spend the first 15 to 30 minutes just reading up and making notes. That’s how I started this, really! I just googled “build a site with Jekyll” and went knee deep into tabs.&lt;/p&gt;

&lt;p&gt;Then problems started to appear. The first problem was what I like to call “store fatigue”. Everyone has their own package management system. I just &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install&lt;/code&gt;ed jekyll, why is it not launching? what do you mean unset variables? well, when this happens, we go back to our &lt;em&gt;headbang development&lt;/em&gt; model. Google the error code and start opening tabs!&lt;/p&gt;

&lt;p&gt;What do I find with this? thanks to the best place in the internet StackOverflow, I find out that apt does not set up jekyll correctly, and that I need to use something called &lt;em&gt;gems&lt;/em&gt; from the ruby repos. I didn’t know what Ruby was until this morning, so I already got something out of the project. (Partial) success! and even better, using the ruby install process just fixed my issue, so the terminal tells me I have a working Jekyll site!&lt;/p&gt;

&lt;p&gt;I open the URL that the program spit out, and I open it on Firefox. What I find in front of my eyes is some form of practical joke.&lt;/p&gt;

&lt;p&gt;Who designed these Jekyll size standards? 60% of the page is literally empty! Well, with this, I remember having seen the words “Jekyll themes” on the google search suggestions when starting my investigations. May the gods bless the almighty algorithm. So, I start looking at these themes on whatever recommended pages there is, like the default Github Pages repos, or third party aggregators.&lt;/p&gt;

&lt;p&gt;Is it some kind design convention? Like an inside joke, written in stone, that a Jekyll theme must waste at least 50% of screen real-estate on empty white space? who designed these, Twitter? Does Jekyll not work in any computers connected to a screen that is not a 4:3 CRT TV from 2002 or a phone? THis needs fixing!&lt;/p&gt;

&lt;p&gt;But when I start looking at the folders that Jekyll helpfully generated, it seems there is no css source anywhere to edit. There &lt;em&gt;is&lt;/em&gt; a css file on the generated site under &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, but it source of configuration seems, at first sight, to be fed entirely with magic and unicorns, invisible to the human eye to access. DuckDuckGo it is then.&lt;/p&gt;

&lt;p&gt;Turns out, Jekyll &lt;em&gt;used to&lt;/em&gt; have the theme files on your site folder, but that is (truthfully, I’ll give them that) hard to mantain and update. So their solution was to put them out as easily installable and upgradable packages (yay!) on the Ruby repositories (ugh, &lt;em&gt;store fatigue&lt;/em&gt;). Apparently, the gem setup already pulled in the default theme as a gem, and the files are somewhere else. A couple tab openings later, I found a bash command incantation that tells me that the theme files are located on &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/gems/2.5.0/gems/minima-2.5.1/&lt;/code&gt;, so I go take a look and see how they work.&lt;/p&gt;

&lt;p&gt;I find out that you can override these by creating the folders yourself in the Jekyll file folder, so I copy the defaults and start implementing some &lt;em&gt;actually sane&lt;/em&gt; design configurations. I set the theme content to be 80% of the window’s width, easy enough, then I try to create more posts to check out the layout.&lt;/p&gt;

&lt;p&gt;That move was about to open me up about 6 hours of work.&lt;/p&gt;

&lt;p&gt;Someone apparently decided that, as the content has to be 33% of the screen width, the &lt;em&gt;only&lt;/em&gt; logical answer is of course set them to be one big unclassified column. Because of course that is the most logical design decision for a modern website. So, change time it is! I decide the best choice for space optimization is a resizing flexbox that shows the posts. Not all of them, more on that later. So, I &lt;code class=&quot;highlighter-rouge&quot;&gt;vim home.html&lt;/code&gt; the template on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_templates&lt;/code&gt; folder and see the problem. It is, apparently, a list, so I need to change this to a css flexbox grid.&lt;/p&gt;

&lt;p&gt;Problem is, I have only headbang learned php in terms of WebDev, which is very much not a client-side static language. So, after opening a bunch of new sites to figure out what even &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid Markup&lt;/code&gt; is, I find out it is apparently decently easy to figure out, at least with the theme’s premade varable structure. The naming structure was good, fortunately (at least something had a good design team on it!) so I configure it to limit it to the last 5 posts, and make it display as a flexbox after some tinkering. Well, a lot of tinkering. I’m not precisely a CSS Wizard.&lt;/p&gt;

&lt;p&gt;So I reload the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; command, and it’s finally working! Now I can investigate how creating a blogpost works. You know, for the &lt;em&gt;blog&lt;/em&gt; part of this blog project that started 6 hours ago? Well, this is when the easy part comes in: the blogposts are auto-detected on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder as long as you name them on the correct way (good thing the docs exist so I see what that is), and it auto-picks the name, post excerpt, SEO tags and permalink from the file header. Wordpress could learn a thing or two about post simplicity from Jekyll at the end of the day.&lt;/p&gt;

&lt;p&gt;Speaking about post simplicity: post tagging. This is great! no database queries, no storage, no consiscency errors… You just write the tag and it parses it for you! So, as I want to write post &lt;em&gt;series&lt;/em&gt;, each series being a category (more on those series coming soon!), I need to make a template for the markdown file to show the categorized post. The best option, according to StackOverflow, is a “Liquid Markup for loop that iterates over every category, with a nested for loop listing the category posts”.&lt;/p&gt;

&lt;p&gt;As easy as that turned out to be, this industry has a word simplicity problem.&lt;/p&gt;

&lt;p&gt;So, after checking that works, it all seems to work fine. So, all the confusing stuff done, now I gotta put it up on a Github Pages site. Easy enough, right? I mean, I’ve pushed stuff to repos before! I have already released &lt;a href=&quot;https://github.com/ivanol55?tab=repositories&quot;&gt;open source projects&lt;/a&gt; before! This is gonna be real easy! Well, turns out, Github Pages is not Github straightforward.&lt;/p&gt;

&lt;p&gt;I push the contents to the site and open &lt;code class=&quot;highlighter-rouge&quot;&gt;ivanol55.github.io&lt;/code&gt;, the expected url. &lt;em&gt;Nada&lt;/em&gt;. Empty. Well, my disappointment is immesurable, my day is ruined, and my DuckDuckGo tab is revving its search &lt;em&gt;engine&lt;/em&gt;. I find out a couple of errors I didn’t assume there:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I need to push the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, not the whole thing&lt;/li&gt;
  &lt;li&gt;I need to tell Github what branch it needs to read as the root of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I figure out how to make a new branch, setup the .git folder to push the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; contents to said branch by default, and make a test push. I find the tab that I left with the github page, press Fn + 5 (60% keyboard gang) to reload the previous 404 and… there’s a site! Jekyll did it, it’s &lt;em&gt;aliiiive!&lt;/em&gt;… wait, wrong book reference?&lt;/p&gt;

&lt;p&gt;Now the blog is live! And after that initial rocky setup, the results are in:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I learned that ruby exists&lt;/li&gt;
  &lt;li&gt;I learned what static site generators are, and that there’s more of them&lt;/li&gt;
  &lt;li&gt;Some more CSS tinkering&lt;/li&gt;
  &lt;li&gt;Some basics on Liquid Markup logic and function&lt;/li&gt;
  &lt;li&gt;How to setup Github Pages&lt;/li&gt;
  &lt;li&gt;A blog where I can write posts. Like this post! Hello!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, it was an interesting weekend project that has opened quite the new road to me about content creation. Maybe even go back to &lt;a href=&quot;https://www.twitch.tv/ivanol55&quot;&gt;Twitch live development&lt;/a&gt; at some point?&lt;/p&gt;

&lt;p&gt;To many new blog posts to come!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="headbang development" /><summary type="html">Blogging is a good way to practice your technical writing soft-skills. You get to learn the really important ability of writing understandable content for a broad audiences, with the perk of building up portfolio. Win-win, right? well, that is, if you can find a topic. Development diaries? client work stories? software reviews? Choice paralysis is a thing, and picking a consistent theme and structure is complicated.</summary></entry></feed>