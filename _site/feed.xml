<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-28T18:35:58+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Devlogs from a non-developer</title><subtitle>ivanol55's technical writeup blog, where a non-developer will ramble about how they fight with self-learning something outside of their professional scope and will take you along for the ride!</subtitle><author><name>Ivan Mendez</name></author><entry><title type="html">Dev Diaries - PCAPAnalyzer I: File rotation is kind of ugly</title><link href="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I/" rel="alternate" type="text/html" title="Dev Diaries - PCAPAnalyzer I: File rotation is kind of ugly" /><published>2021-02-28T10:00:00+01:00</published><updated>2021-02-28T10:00:00+01:00</updated><id>http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I</id><content type="html" xml:base="http://localhost:4000/blog/dev%20diaries/dev-diaries-pcapanalyzer-I/">&lt;p&gt;Have you ever used Wireshark?&lt;/p&gt;

&lt;p&gt;It’s an &lt;em&gt;amazing&lt;/em&gt; network debugging and investigation tool. Anyone remotely related to connected comùters will regularly use it. Networking, security analysts, network application development, penetration testing… either directly by just using the graphical software, the CLI tool &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, or a variation of that for a quick lightweight debugging, like &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;. It will start sniffing in whatever network interface you tell the program to listen on, and log every single packet it sees into a file for storage, or even into standard input for you to just see in a quick check, for example to see if one of your programs is actually sending keepalive connections.&lt;/p&gt;

&lt;p&gt;But that’s where the problems start popping up on the “let’s store everything in one file” solution: scalability basically disappears from your scope, for concurrency and management issues we’ll get into later.&lt;/p&gt;

&lt;p&gt;Have you ever tried to open up wireshark in a windows machine? They have a &lt;em&gt;lot&lt;/em&gt; of background traffic. Like, &lt;strong&gt;&lt;em&gt;a lot&lt;/em&gt;&lt;/strong&gt;. Phoning home for update checks, antivirus definition changes, hell, even the windows calculator needs to phone home for currency conversion capabilities. The future is now, and it’s connected. Just network noise galore.&lt;/p&gt;

&lt;p&gt;Although the truth is you don’t even need Windows for that to be a problem to be a thing. Linux doesn’t have that noise problem, but if you have a lot of linux boxes, the problem pops up again. So, when you’re on the security field, like SOC analysis, you get quite a big amount of traffic to process. Thing is, then you imagine what most offices are, which is bbasically a big bunch of &lt;em&gt;windows&lt;/em&gt; machines, and you quickly notice you’re gonna run into some big data-related problems.&lt;/p&gt;

&lt;p&gt;Now, there’s a problem with file storage even when you’re only handling a single data node, and it’s that the format can be inefficient. It’s convenient, but you can’t do a lot with it before you get out of control. Try to open a 1 Gigabyte &lt;code class=&quot;highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; file and see what it takes to open it and filter content. That’s a gigabyte. A twenty minute 1080p youtube video is a gigabyte of traffic. This can be generated by one client, in twenty minutes, without them doing anything else, which is unlikely. Email sending, open browser tabs with open connections, background programs polling for updates… multitasking in computers, and multitasking in your coworkers! concurrency for the concurrency gods!&lt;/p&gt;

&lt;p&gt;So we have a size problem. How was this solved originally? with a little something called &lt;em&gt;file rotation&lt;/em&gt;. This is a program implementation that allows programs to, once the files reach a certain size, consider it finished and rotate into a new one, like moving from &lt;code class=&quot;highlighter-rouge&quot;&gt;netlog.pcap.000001&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;log.pcap.000002&lt;/code&gt;. Even then, if it’s a constant system, you can circle back and overwrite the first one. So this would never run you out of space! Cool solution! problem solved, right?&lt;/p&gt;

&lt;p&gt;Well, if this was a done and solved problem for my use case, I would not be here writing a blog post series about it, wouln’t I?&lt;/p&gt;

&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; solved in terms of enterprise tool availability for production usage, but there’s no fun on just installing an already readily available tool for this that handles it, learning happens when you break and fix stuff! and what better to fix roadblocks on, that your own new from-scratch tool?&lt;/p&gt;

&lt;p&gt;My problem here is that I like centralization of content. So I don’t like having many files around and worrying that they will one day be overwritten. But even for non-lazy people, this creates a data concurrency problem, since only one person could write a file at once, and that means you could only have one client at a time. Pretty useless data aggregation system, if you ask me.&lt;/p&gt;

&lt;p&gt;I obviously decided to overengineer an open source-licensed solution that only I would use, that is also probably worse than the actual solutions out there. Because if you know this blog, you know I’m about security and IT design, not application development. That said, I still like to learn new stuff and challenging myself, so project PCAPAnalyzer was born.&lt;/p&gt;

&lt;p&gt;Now, this happened around two and a half years ago now, and has been in development intermittently since, because self-learning roadblocks. I hadn’t gotten into desktop app development then and I haven’t yet (that may be a future series? stay tuned!) so I turned into the next best thing I knew: Web Applications. I knew HTML, I had heard about PHP, that’s how those work, right? Open up a browser, click the link bookmark and the entire tool is at your disposal! No dependency hell, no distributed app update management for potentially hundreds of machines, no client drift from a valid config… beautiful words for a mantainer that is really not a mantainer!&lt;/p&gt;

&lt;p&gt;First thing I needed was to set app requirements and priorities. You can’t build something if you don’t know &lt;em&gt;what&lt;/em&gt; you want and need to build. I got to thinking about the frontend first. Now, I’m a simple man. I see a standard, I use a standard. Django? That looks like too much abstraction, and I already know some pyhthon3, so I want something tried and tested, and also new to me.&lt;/p&gt;

&lt;p&gt;On web, PHP seems to be my best bet, since it’s also a useful skill to pick up. No laravel or anything, I don’t want &lt;em&gt;any&lt;/em&gt; unnecesary abstraction layers. You learn the basics first, then build up with simplifying tools. The rest was the standard: HTML, CSS3 (I &lt;em&gt;could&lt;/em&gt; use Bootstrap, but I think I’m gonna leave learning responsive design for another time), apache2 webserver.&lt;/p&gt;

&lt;p&gt;Next comes the backend. This was, at the time, completely new territory to me, so I did some searching in good ol’ DuckDuckGo and looked at what could best suit my needs. I wanted to aggregate everything I gathered into one place and make it really fast in terms of data search at scale (I was going to quickly add up a &lt;em&gt;lot&lt;/em&gt; of data, remember the youtube video example?), so that screamed Database to me.&lt;/p&gt;

&lt;p&gt;I had also done a bit of learning on class about the LAMP stack, so I was familiar with MySQL. Free, Open Source, enterprise-ready scalable software, there for me to use, it was the perfect match. Data capture source was wireshark on the terminal, that one’s easy! unfortunately, wireshark does not have a “put into database” terminal option, neither does MySQL have a “wireshark capture” data source. So I needed some data processing.&lt;/p&gt;

&lt;p&gt;This is the part of the backend that was going to be the most engaging: something I build basically &lt;em&gt;from scratch&lt;/em&gt;. In class we processed data with python scripts, and it seemed very extensible and easy to implement. So I chose python as a tool for data processing and transformation, which then would go into a database. Processing strings and inserting into a database.&lt;/p&gt;

&lt;p&gt;Let’s list our finaly decided application requirements and the choices to actually meet them&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;frontend
    &lt;ol&gt;
      &lt;li&gt;We want this tool to be available inside of a website, solved with &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; for delivery because it’s the gold standard&lt;/li&gt;
      &lt;li&gt;The site should be dynamic and it needs to be capable of database management around our &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; backend, solved using &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Make it pretty: &lt;code class=&quot;highlighter-rouge&quot;&gt;css3&lt;/code&gt; is tried and tested for something! the web standard is very much a good tool for us&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;backend
    &lt;ol&gt;
      &lt;li&gt;Network interface(s) data capture with Wireshark, more precisely its terminal counterpart &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, because, no-gui Debian server!&lt;/li&gt;
      &lt;li&gt;Store the data consistently for fast retrieval: &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; has been getting more efficient for the last twenty five years, good amount of work there&lt;/li&gt;
      &lt;li&gt;Data treatment: There’s a lot of binary formats around that are not compatible with each other. That’s why we created &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;, the age of interoperability. Let’s create some of those with &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had seen all this on separate class assignments, so it was a good cross-understanding test! project PCAPAnalyzer was feasible and it was just about time for some invesigation and building! an &lt;em&gt;actual&lt;/em&gt; product on the horizon!&lt;/p&gt;

&lt;p&gt;But that’s a story for the next dev diary, where we’ll start giving an eye into how much I underestimanted the complexity of data processing as a non-developer. See you then!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="dev diaries" /><summary type="html">Have you ever used Wireshark?</summary></entry><entry><title type="html">Headbang development I: What’s this Jekyll thing?</title><link href="http://localhost:4000/blog/headbang%20development/headbang-development-I/" rel="alternate" type="text/html" title="Headbang development I: What’s this Jekyll thing?" /><published>2021-02-14T10:00:00+01:00</published><updated>2021-02-14T10:00:00+01:00</updated><id>http://localhost:4000/blog/headbang%20development/headbang-development-I</id><content type="html" xml:base="http://localhost:4000/blog/headbang%20development/headbang-development-I/">&lt;p&gt;Blogging is a good way to practice your technical writing soft-skills. You get to learn the really important ability of writing understandable content for a broad audiences, with the perk of building up portfolio. Win-win, right? well, that is, if you can find a topic. Development diaries? client work stories? software reviews? Choice paralysis is a thing, and picking a consistent theme and structure is complicated.&lt;/p&gt;

&lt;p&gt;Then I started to build this blog while I thought about dev diaries in a completely new platform to me, and suddenly saw my first post series in front of me, in the form of cryptic error codes and stacked browser tabs: self-learning stories.&lt;/p&gt;

&lt;p&gt;Self-learning sounds fun at first when you look at it. That’s something that recruiters like, right? independence, knowing how to set yourself up in new environments without much one-on-one help, something-something pull your own bootstraps. It &lt;em&gt;is&lt;/em&gt; a really useful skill to pick up, especially as a junior, but it can sometimes be an… interesting process.&lt;/p&gt;

&lt;p&gt;I like to compare this way of learning to &lt;a href=&quot;https://www.answerinprogress.com/&quot;&gt;Answer in Progress&lt;/a&gt;’s way of investigating a topic: search what you want to do on Google (Bonus points for using DuckDuckGo) and see where the algorithm takes you. Documentation, courses, “getting started” tutorials, github repos… I usually spend the first 15 to 30 minutes just reading up and making notes. That’s how I started this, really! I just googled “build a site with Jekyll” and went knee deep into tabs.&lt;/p&gt;

&lt;p&gt;Then problems started to appear. The first problem was what I like to call “store fatigue”. Everyone has their own package management system. I just &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install&lt;/code&gt;ed jekyll, why is it not launching? what do you mean unset variables? well, when this happens, we go back to our &lt;em&gt;headbang development&lt;/em&gt; model. Google the error code and start opening tabs!&lt;/p&gt;

&lt;p&gt;What do I find with this? thanks to the best place in the internet StackOverflow, I find out that apt does not set up jekyll correctly, and that I need to use something called &lt;em&gt;gems&lt;/em&gt; from the ruby repos. I didn’t know what Ruby was until this morning, so I already got something out of the project. (Partial) success! and even better, using the ruby install process just fixed my issue, so the terminal tells me I have a working Jekyll site!&lt;/p&gt;

&lt;p&gt;I open the URL that the program spit out, and I open it on Firefox. What I find in front of my eyes is some form of practical joke.&lt;/p&gt;

&lt;p&gt;Who designed these Jekyll size standards? 60% of the page is literally empty! Well, with this, I remember having seen the words “Jekyll themes” on the google search suggestions when starting my investigations. May the gods bless the almighty algorithm. So, I start looking at these themes on whatever recommended pages there is, like the default Github Pages repos, or third party aggregators.&lt;/p&gt;

&lt;p&gt;Is it some kind design convention? Like an inside joke, written in stone, that a Jekyll theme must waste at least 50% of screen real-estate on empty white space? who designed these, Twitter? Does Jekyll not work in any computers connected to a screen that is not a 4:3 CRT TV from 2002 or a phone? THis needs fixing!&lt;/p&gt;

&lt;p&gt;But when I start looking at the folders that Jekyll helpfully generated, it seems there is no css source anywhere to edit. There &lt;em&gt;is&lt;/em&gt; a css file on the generated site under &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, but it source of configuration seems, at first sight, to be fed entirely with magic and unicorns, invisible to the human eye to access. DuckDuckGo it is then.&lt;/p&gt;

&lt;p&gt;Turns out, Jekyll &lt;em&gt;used to&lt;/em&gt; have the theme files on your site folder, but that is (truthfully, I’ll give them that) hard to mantain and update. So their solution was to put them out as easily installable and upgradable packages (yay!) on the Ruby repositories (ugh, &lt;em&gt;store fatigue&lt;/em&gt;). Apparently, the gem setup already pulled in the default theme as a gem, and the files are somewhere else. A couple tab openings later, I found a bash command incantation that tells me that the theme files are located on &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/gems/2.5.0/gems/minima-2.5.1/&lt;/code&gt;, so I go take a look and see how they work.&lt;/p&gt;

&lt;p&gt;I find out that you can override these by creating the folders yourself in the Jekyll file folder, so I copy the defaults and start implementing some &lt;em&gt;actually sane&lt;/em&gt; design configurations. I set the theme content to be 80% of the window’s width, easy enough, then I try to create more posts to check out the layout.&lt;/p&gt;

&lt;p&gt;That move was about to open me up about 6 hours of work.&lt;/p&gt;

&lt;p&gt;Someone apparently decided that, as the content has to be 33% of the screen width, the &lt;em&gt;only&lt;/em&gt; logical answer is of course set them to be one big unclassified column. Because of course that is the most logical design decision for a modern website. So, change time it is! I decide the best choice for space optimization is a resizing flexbox that shows the posts. Not all of them, more on that later. So, I &lt;code class=&quot;highlighter-rouge&quot;&gt;vim home.html&lt;/code&gt; the template on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_templates&lt;/code&gt; folder and see the problem. It is, apparently, a list, so I need to change this to a css flexbox grid.&lt;/p&gt;

&lt;p&gt;Problem is, I have only headbang learned php in terms of WebDev, which is very much not a client-side static language. So, after opening a bunch of new sites to figure out what even &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid Markup&lt;/code&gt; is, I find out it is apparently decently easy to figure out, at least with the theme’s premade varable structure. The naming structure was good, fortunately (at least something had a good design team on it!) so I configure it to limit it to the last 5 posts, and make it display as a flexbox after some tinkering. Well, a lot of tinkering. I’m not precisely a CSS Wizard.&lt;/p&gt;

&lt;p&gt;So I reload the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; command, and it’s finally working! Now I can investigate how creating a blogpost works. You know, for the &lt;em&gt;blog&lt;/em&gt; part of this blog project that started 6 hours ago? Well, this is when the easy part comes in: the blogposts are auto-detected on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder as long as you name them on the correct way (good thing the docs exist so I see what that is), and it auto-picks the name, post excerpt, SEO tags and permalink from the file header. Wordpress could learn a thing or two about post simplicity from Jekyll at the end of the day.&lt;/p&gt;

&lt;p&gt;Speaking about post simplicity: post tagging. This is great! no database queries, no storage, no consiscency errors… You just write the tag and it parses it for you! So, as I want to write post &lt;em&gt;series&lt;/em&gt;, each series being a category (more on those series coming soon!), I need to make a template for the markdown file to show the categorized post. The best option, according to StackOverflow, is a “Liquid Markup for loop that iterates over every category, with a nested for loop listing the category posts”.&lt;/p&gt;

&lt;p&gt;As easy as that turned out to be, this industry has a word simplicity problem.&lt;/p&gt;

&lt;p&gt;So, after checking that works, it all seems to work fine. So, all the confusing stuff done, now I gotta put it up on a Github Pages site. Easy enough, right? I mean, I’ve pushed stuff to repos before! I have already released &lt;a href=&quot;https://github.com/ivanol55?tab=repositories&quot;&gt;open source projects&lt;/a&gt; before! This is gonna be real easy! Well, turns out, Github Pages is not Github straightforward.&lt;/p&gt;

&lt;p&gt;I push the contents to the site and open &lt;code class=&quot;highlighter-rouge&quot;&gt;ivanol55.github.io&lt;/code&gt;, the expected url. &lt;em&gt;Nada&lt;/em&gt;. Empty. Well, my disappointment is immesurable, my day is ruined, and my DuckDuckGo tab is revving its search &lt;em&gt;engine&lt;/em&gt;. I find out a couple of errors I didn’t assume there:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I need to push the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, not the whole thing&lt;/li&gt;
  &lt;li&gt;I need to tell Github what branch it needs to read as the root of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I figure out how to make a new branch, setup the .git folder to push the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; contents to said branch by default, and make a test push. I find the tab that I left with the github page, press Fn + 5 (60% keyboard gang) to reload the previous 404 and… there’s a site! Jekyll did it, it’s &lt;em&gt;aliiiive!&lt;/em&gt;… wait, wrong book reference?&lt;/p&gt;

&lt;p&gt;Now the blog is live! And after that initial rocky setup, the results are in:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I learned that ruby exists&lt;/li&gt;
  &lt;li&gt;I learned what static site generators are, and that there’s more of them&lt;/li&gt;
  &lt;li&gt;Some more CSS tinkering&lt;/li&gt;
  &lt;li&gt;Some basics on Liquid Markup logic and function&lt;/li&gt;
  &lt;li&gt;How to setup Github Pages&lt;/li&gt;
  &lt;li&gt;A blog where I can write posts. Like this post! Hello!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, it was an interesting weekend project that has opened quite the new road to me about content creation. Maybe even go back to &lt;a href=&quot;https://www.twitch.tv/ivanol55&quot;&gt;Twitch live development&lt;/a&gt; at some point?&lt;/p&gt;

&lt;p&gt;To many new blog posts to come!&lt;/p&gt;</content><author><name>Ivan Mendez</name></author><category term="headbang development" /><summary type="html">Blogging is a good way to practice your technical writing soft-skills. You get to learn the really important ability of writing understandable content for a broad audiences, with the perk of building up portfolio. Win-win, right? well, that is, if you can find a topic. Development diaries? client work stories? software reviews? Choice paralysis is a thing, and picking a consistent theme and structure is complicated.</summary></entry></feed>